package leetCode.medium

import kotlin.system.measureTimeMillis

class LengthOfLongestSubsequenceSumsToTarget {
    fun lengthOfLongestSubsequence(nums: List<Int>, target: Int): Int {
        val dp = IntArray(1000 + 1) { Int.MIN_VALUE }

        dp[0] = 0

        for (num in nums) {
            for (i in 1000 - num downTo 0) {
                dp[i + num] = maxOf(dp[i + num], dp[i] + 1)
            }
        }

        return if (dp[target] > 0) dp[target] else -1
    }
}

fun main(args: Array<String>) {
    val solution = LengthOfLongestSubsequenceSumsToTarget()
    println(solution.lengthOfLongestSubsequence(listOf(1, 2, 3, 4, 5), 9))
    println(solution.lengthOfLongestSubsequence(listOf(4, 1, 3, 2, 1, 5), 7))
    println(solution.lengthOfLongestSubsequence(listOf(1, 1, 5, 4, 5), 3))

    val time = measureTimeMillis {
        solution.lengthOfLongestSubsequence(
            listOf(
                90,
                84,
                27,
                72,
                45,
                63,
                10,
                69,
                66,
                65,
                21,
                42,
                65,
                14,
                83,
                8,
                73,
                52,
                42,
                71,
                53,
                15,
                8,
                6,
                55,
                49,
                99,
                30,
                89,
                5,
                46,
                58,
                27,
                48,
                16,
                10,
                87,
                55,
                59,
                87,
                6,
                97,
                68,
                79,
                97,
                32,
                53,
                89,
                78,
                63,
                20,
                28,
                85,
                79,
                43,
                95,
                26,
                23,
                10,
                10,
                78,
                63,
                76,
                44,
                74,
                74,
                32,
                24,
                6,
                64,
                26,
                69,
                88,
                17,
                49,
                81,
                7,
                43,
                16,
                69,
                25,
                78,
                20,
                94,
                89,
                2,
                100,
                29
            ),
            1000
        )
    }
    println(time)

//    println(
//        solution.lengthOfLongestSubsequence(
//            listOf(
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//                1,
//            ), 1200
//        )
//    )
}